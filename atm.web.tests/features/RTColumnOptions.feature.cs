// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace atm.web.tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RouteTrackerColumnOptionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "RTColumnOptions.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Route Tracker Column Options", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Route Tracker Column Options")))
            {
                global::atm.web.tests.Features.RouteTrackerColumnOptionsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User can\'t move Columns in the Routes - Selected Columns table beyond the top of " +
            "the list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Route Tracker Column Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYG314")]
        public virtual void UserCantMoveColumnsInTheRoutes_SelectedColumnsTableBeyondTheTopOfTheList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User can\'t move Columns in the Routes - Selected Columns table beyond the top of " +
                    "the list", null, new string[] {
                        "SYG314"});
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
 testRunner.Given("I am an authenticated ATM user on the \"Route Tracker\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.And("I view the Column Options popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.And("I select 3 column(s) from the Routes - Selected Columns table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.When("I try to move the Selected Routes columns past the top of the list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("I should still see the moved columns in the list in Routes Selected List", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User can\'t move Columns in the Routes - Selected Columns table beyond the bottom " +
            "of the list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Route Tracker Column Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYG314")]
        public virtual void UserCantMoveColumnsInTheRoutes_SelectedColumnsTableBeyondTheBottomOfTheList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User can\'t move Columns in the Routes - Selected Columns table beyond the bottom " +
                    "of the list", null, new string[] {
                        "SYG314"});
#line 12
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 13
 testRunner.Given("I am an authenticated ATM user on the \"Route Tracker\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.And("I view the Column Options popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("I select 4 column(s) from the Routes - Selected Columns table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.When("I try to move the Selected Routes columns past the bottom of the list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("I should still see the moved columns in the list in Routes Selected List", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User can\'t move Columns in the Stops - Selected Columns table beyond the top of t" +
            "he list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Route Tracker Column Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYG314")]
        public virtual void UserCantMoveColumnsInTheStops_SelectedColumnsTableBeyondTheTopOfTheList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User can\'t move Columns in the Stops - Selected Columns table beyond the top of t" +
                    "he list", null, new string[] {
                        "SYG314"});
#line 20
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 21
 testRunner.Given("I am an authenticated ATM user on the \"Route Tracker\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.And("I view the Column Options popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("I select 4 column(s) from the Stops - Selected Columns table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.When("I try to move the Selected Stops columns past the top of the list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then("I should still see the moved columns in the list in Stops Selected List", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User can\'t move Columns in the Stops - Selected Columns table beyond the bottom o" +
            "f the list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Route Tracker Column Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYG314")]
        public virtual void UserCantMoveColumnsInTheStops_SelectedColumnsTableBeyondTheBottomOfTheList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User can\'t move Columns in the Stops - Selected Columns table beyond the bottom o" +
                    "f the list", null, new string[] {
                        "SYG314"});
#line 28
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 29
 testRunner.Given("I am an authenticated ATM user on the \"Route Tracker\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
 testRunner.And("I view the Column Options popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.And("I select 5 column(s) from the Stops - Selected Columns table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.When("I try to move the Selected Stops columns past the bottom of the list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("I should still see the moved columns in the list in Stops Selected List", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("user can\'t move Scheduled Delivery column to Available list by double clicking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Route Tracker Column Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYG268")]
        public virtual void UserCantMoveScheduledDeliveryColumnToAvailableListByDoubleClicking()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("user can\'t move Scheduled Delivery column to Available list by double clicking", null, new string[] {
                        "SYG268"});
#line 36
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 37
 testRunner.Given("I am an authenticated ATM user on the \"Route Tracker\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
 testRunner.And("I view the Column Options popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.When("I double left click on the \'Scheduled Delivery\' column", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("I should not see the \'Scheduled Delivery\' column in the Stops Available list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("user can\'t move Adjusted Delivery column to Available list by double clicking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Route Tracker Column Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYG268")]
        public virtual void UserCantMoveAdjustedDeliveryColumnToAvailableListByDoubleClicking()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("user can\'t move Adjusted Delivery column to Available list by double clicking", null, new string[] {
                        "SYG268"});
#line 43
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 44
 testRunner.Given("I am an authenticated ATM user on the \"Route Tracker\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.And("I view the Column Options popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.When("I double left click on the \'Adjusted Delivery\' column", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.Then("I should not see the \'Adjusted Delivery\' column in the Stops Available list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void UserCantMoveOffsetHoursColumnsToAvailableListByDoubleClicking(string exampleDescription, string offsetHoursColumnName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SYG268",
                    "SYG455"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("user can\'t move Offset Hours columns to Available list by double clicking", null, @__tags);
#line 50
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 51
 testRunner.Given("I am an authenticated ATM user on the \"Route Tracker\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
 testRunner.And("I view the Column Options popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.When(string.Format("I double left click on the \'{0}\' column", offsetHoursColumnName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.Then(string.Format("I should not see the \'{0}\' column in the Stops Available list", offsetHoursColumnName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("user can\'t move Offset Hours columns to Available list by double clicking: Adjust" +
            "ed Offset Hours Column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Route Tracker Column Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYG268")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYG455")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Adjusted Offset Hours Column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:example description", "Adjusted Offset Hours Column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Offset Hours Column Name", "Adjusted Offset Hours / Cascade")]
        public virtual void UserCantMoveOffsetHoursColumnsToAvailableListByDoubleClicking_AdjustedOffsetHoursColumn()
        {
#line 50
this.UserCantMoveOffsetHoursColumnsToAvailableListByDoubleClicking("Adjusted Offset Hours Column", "Adjusted Offset Hours / Cascade", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("user can\'t move Offset Hours columns to Available list by double clicking: Schedu" +
            "led Offset Hours Column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Route Tracker Column Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYG268")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYG455")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Scheduled Offset Hours Column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:example description", "Scheduled Offset Hours Column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Offset Hours Column Name", "Scheduled Offset Hours / Cascade")]
        public virtual void UserCantMoveOffsetHoursColumnsToAvailableListByDoubleClicking_ScheduledOffsetHoursColumn()
        {
#line 50
this.UserCantMoveOffsetHoursColumnsToAvailableListByDoubleClicking("Scheduled Offset Hours Column", "Scheduled Offset Hours / Cascade", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Routes Selected Columns shows correct option after clicking Reset To Default")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Route Tracker Column Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYG453")]
        public virtual void RoutesSelectedColumnsShowsCorrectOptionAfterClickingResetToDefault()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Routes Selected Columns shows correct option after clicking Reset To Default", null, new string[] {
                        "SYG453"});
#line 61
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 62
 testRunner.Given("I am an authenticated ATM user on the \"Route Tracker\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 63
 testRunner.And("I select a random center", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And("I view the Column Options popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.When("I click the \'Reset To Default\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table1.AddRow(new string[] {
                        "Route #"});
            table1.AddRow(new string[] {
                        "Route Name"});
            table1.AddRow(new string[] {
                        "Stops"});
            table1.AddRow(new string[] {
                        "Concepts"});
            table1.AddRow(new string[] {
                        "Scheduled Dispatch Time"});
            table1.AddRow(new string[] {
                        "Adjusted Dispatch Time"});
            table1.AddRow(new string[] {
                        "Primary Driver"});
            table1.AddRow(new string[] {
                        "Secondary Driver"});
            table1.AddRow(new string[] {
                        "Team Driver/Helper"});
#line 66
 testRunner.Then("I should see the following options in the \'Routes Selected Columns\' select list", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Routes Available Columns shows correct option after clicking Reset To Default")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Route Tracker Column Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYG453")]
        public virtual void RoutesAvailableColumnsShowsCorrectOptionAfterClickingResetToDefault()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Routes Available Columns shows correct option after clicking Reset To Default", null, new string[] {
                        "SYG453"});
#line 79
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 80
 testRunner.Given("I am an authenticated ATM user on the \"Route Tracker\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 81
 testRunner.And("I select a random center", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.And("I view the Column Options popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.When("I click the \'Reset To Default\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table2.AddRow(new string[] {
                        "Cases"});
            table2.AddRow(new string[] {
                        "Cooler Cases"});
            table2.AddRow(new string[] {
                        "Cooler Cubes"});
            table2.AddRow(new string[] {
                        "Cooler LBs"});
            table2.AddRow(new string[] {
                        "Cubes"});
            table2.AddRow(new string[] {
                        "Dry Cases"});
            table2.AddRow(new string[] {
                        "Dry Cubes"});
            table2.AddRow(new string[] {
                        "Dry LBs"});
            table2.AddRow(new string[] {
                        "Freezer Cases"});
            table2.AddRow(new string[] {
                        "Freezer Cubes"});
            table2.AddRow(new string[] {
                        "Freezer LBs"});
            table2.AddRow(new string[] {
                        "LBs"});
            table2.AddRow(new string[] {
                        "Trailer Id"});
            table2.AddRow(new string[] {
                        "Truck Id"});
#line 84
 testRunner.Then("I should see the following options in the \'Routes Available Columns\' select list", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Stops Selected Columns shows correct option after clicking Reset To Default")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Route Tracker Column Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYG453")]
        public virtual void StopsSelectedColumnsShowsCorrectOptionAfterClickingResetToDefault()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Stops Selected Columns shows correct option after clicking Reset To Default", null, new string[] {
                        "SYG453"});
#line 102
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 103
 testRunner.Given("I am an authenticated ATM user on the \"Route Tracker\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 104
 testRunner.And("I select a random center", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.And("I view the Column Options popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.When("I click the \'Reset To Default\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table3.AddRow(new string[] {
                        "Stop"});
            table3.AddRow(new string[] {
                        "Status"});
            table3.AddRow(new string[] {
                        "Bill To"});
            table3.AddRow(new string[] {
                        "Ship To"});
            table3.AddRow(new string[] {
                        "Customer"});
            table3.AddRow(new string[] {
                        "Concept"});
            table3.AddRow(new string[] {
                        "LBs"});
            table3.AddRow(new string[] {
                        "Cases"});
            table3.AddRow(new string[] {
                        "Planned Delivery"});
            table3.AddRow(new string[] {
                        "Scheduled Delivery"});
            table3.AddRow(new string[] {
                        "Scheduled Offset Hours / Cascade"});
            table3.AddRow(new string[] {
                        "Adjusted Delivery"});
            table3.AddRow(new string[] {
                        "Adjusted Offset Hours / Cascade"});
            table3.AddRow(new string[] {
                        "Actual Arrival Time"});
            table3.AddRow(new string[] {
                        "Comment"});
#line 107
 testRunner.Then("I should see the following options in the \'Stops Selected Columns\' select list", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Stops Available Columns shows correct option after clicking Reset To Default")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Route Tracker Column Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYG453")]
        public virtual void StopsAvailableColumnsShowsCorrectOptionAfterClickingResetToDefault()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Stops Available Columns shows correct option after clicking Reset To Default", null, new string[] {
                        "SYG453"});
#line 126
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 127
 testRunner.Given("I am an authenticated ATM user on the \"Route Tracker\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 128
 testRunner.And("I select a random center", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
 testRunner.And("I view the Column Options popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
 testRunner.When("I click the \'Reset To Default\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table4.AddRow(new string[] {
                        "City"});
            table4.AddRow(new string[] {
                        "Cooler Cases"});
            table4.AddRow(new string[] {
                        "Cooler Cubes"});
            table4.AddRow(new string[] {
                        "Cooler LBs"});
            table4.AddRow(new string[] {
                        "Cubes"});
            table4.AddRow(new string[] {
                        "Current Driver Name"});
            table4.AddRow(new string[] {
                        "Dry Cases"});
            table4.AddRow(new string[] {
                        "Dry Cubes"});
            table4.AddRow(new string[] {
                        "Dry LBs"});
            table4.AddRow(new string[] {
                        "Email"});
            table4.AddRow(new string[] {
                        "Freezer Cases"});
            table4.AddRow(new string[] {
                        "Freezer Cubes"});
            table4.AddRow(new string[] {
                        "Freezer LBs"});
            table4.AddRow(new string[] {
                        "Order Status"});
            table4.AddRow(new string[] {
                        "Phone"});
            table4.AddRow(new string[] {
                        "State"});
            table4.AddRow(new string[] {
                        "Stop Status"});
            table4.AddRow(new string[] {
                        "Street"});
            table4.AddRow(new string[] {
                        "Zip"});
#line 131
 testRunner.Then("I should see the following options in the \'Stops Available Columns\' select list", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User can load stops table after selecting all stops columns")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Route Tracker Column Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SYG449")]
        public virtual void UserCanLoadStopsTableAfterSelectingAllStopsColumns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User can load stops table after selecting all stops columns", null, new string[] {
                        "SYG449"});
#line 154
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 155
 testRunner.Given("I am an authenticated ATM user on the \"Route Tracker\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 156
 testRunner.And("I select a random center", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
 testRunner.And("All Routes and Stops columns are selected in Column Options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.When("I view the Stops Table for a random route", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 159
 testRunner.Then("I should see the stops table load successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
